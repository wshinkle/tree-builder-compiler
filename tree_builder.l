%{
/*
 * Simple example lex input file
 *
 * Shawn Ostermann -- Sept 11, 2022
 *
 * Headstart version
 */

#include <string.h>
#include <ctype.h>
#include "parser.tab.h"

/* some internal files generated by bison */
void yyerror(const char *s,...);
void yywarn(const char *s,...);
int yywrap(void) {return(1);}    // should be in library, but here it is for github

/* useful global variables */
extern int debug;

/* Everything up to the funny characters on the next line */
/* goes directly into the lex.yy.c file */
%}



/* The rest of this after the '%%' is lex rules */
%%

[ \t]+	        { }  /* Just ignore white space */

"\n" 	        { return(EOLN); } 

"|"             {return(PIPE);} 

"<"             {return (INFILE);}

">"             {return (OUTFILE);}

">>"            {return (OUTFILE_APPEND);}

"2>"            {return (ERRFILE);}

"2>>"           {return (ERRFILE_APPEND);}

"="             {return (EQUALS);}



[0-9a-zA-Z\-\.\\/\_\,\?\&\~\!\@\#\$\%\^\*\(\)\+\-\[\]\{\}\;\:]+ {
    /* a "WORD" - will need to be modified */
    if (debug)
        printf("scanner saw WORD '%s'\n", yytext);
    yylval.string = strdup(yytext);  /* make a copy of the string */
    return(WORD);
} 

\"(\\(.|\n)|[^\\"\n])*\" {
    /*for things inside quotes*/
    if (debug)
        printf("scanner saw QUOTED_STRING '%s'\n", yytext);
    yylval.string = strdup(yytext);  /* make a copy of the string */
    return(WORD);
}

\'(\\(.|\n)|[^\\'\n])*\' {
    /* for things inside single quotes*/
    if (debug)
        printf("scanner saw QUOTED_STRING '%s'\n", yytext);
    yylval.string = strdup(yytext);  /* make a copy of the string */
    return(WORD);
}

\"(\\(.|\n)|[^\\"\n])* {
    /* Mismatched quotes*/
    if (debug)
        printf("scanner: Unterminated string '%s'\n", yytext);
    yyerror("unterminated string");
    return(ERROR);

}


.		{
    /* if we haven't matched anything yet, then it's illegal */
    fprintf(stdout, "scanner: Bad character '%c'\n", *yytext);
}


%%